{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This is the design document for the Insights Personal Knowledge Database (PKB) desktop application. It details the design goals, application architecture and underlying data model.","title":"Home"},{"location":"#welcome","text":"This is the design document for the Insights Personal Knowledge Database (PKB) desktop application. It details the design goals, application architecture and underlying data model.","title":"Welcome"},{"location":"about/license/","text":"Licensing While the code is licensed via the MIT license, this design document is licensed with the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0) license. Creative Commons license Copyright (c) 2019 Samuel D. Holloway All files in this code repository are licensed with the Creative Commons license: Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0) https://creativecommons.org/licenses/by-nc-nd/4.0/ Attribution-NonCommercial-NoDerivatives 4.0 International Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors: wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. c. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. d. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. e. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. f. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. g. Licensor means the individual(s) or entity(ies) granting rights under this Public License. h. NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and b. produce and reproduce, but not Share, Adapted Material for NonCommercial purposes only. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material, You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. For the avoidance of doubt, You do not have permission under this Public License to Share Adapted Material. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only and provided You do not Share Adapted Material; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.","title":"License"},{"location":"about/license/#licensing","text":"While the code is licensed via the MIT license, this design document is licensed with the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0) license.","title":"Licensing"},{"location":"about/license/#creative-commons-license","text":"","title":"Creative Commons license"},{"location":"about/license/#copyright-c-2019-samuel-d-holloway","text":"All files in this code repository are licensed with the Creative Commons license: Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)","title":"Copyright (c) 2019 Samuel D. Holloway"},{"location":"about/license/#httpscreativecommonsorglicensesby-nc-nd40","text":"Attribution-NonCommercial-NoDerivatives 4.0 International Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors: wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. c. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. d. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. e. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. f. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. g. Licensor means the individual(s) or entity(ies) granting rights under this Public License. h. NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and b. produce and reproduce, but not Share, Adapted Material for NonCommercial purposes only. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material, You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. For the avoidance of doubt, You do not have permission under this Public License to Share Adapted Material. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only and provided You do not Share Adapted Material; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.","title":"https://creativecommons.org/licenses/by-nc-nd/4.0/"},{"location":"data_model/data_spaces/","text":"Data Spaces The data model is partition into multiple spaces based on intended use. They are: System Space, User Space, Data Sets System Space The system space is designated for Element Definitions that are provided out of the box by the application. They can be used by the user but not redefined. User Space The user space is composed of all Data Sets and Element Definitions defined by a user. Data Sets A data set is a collection of Element Definitions and Elements specified by a user. They are analogous to a workspace. Elements created in a data set are not available in another. They provide top level partitioning of elements for the user. The Data Set Life Cycle While the System Space and User Space cannot be directly manipulated by the user, data sets can. They have a full life cycle in which users can create and manage multiple data sets. The image below provides insight into the possible data set life cycle. New data sets are provisioned by either creating a new empty one or importing an existing one. A user could import a data set they received from another person or as a restore from an earlier export. Once a data set exists, a user can select it. After it is selected the user can choose to edit it, view it, export a copy of it or even delete it. Data Spaces Example It is easier to understand the design intention of the data spaces with an example. Lynn is a user that designs IT systems. Imagine that Lynn is using Insights to help think through the work that will be required to build an IT system. She starts by identifying the different data types she needs for defining her system. She creates Element Definitions for each of the data types. These definitions are stored in her user space. They can be used to create new Elements in all the data sets she creates. Lynn knows her system is going to need multiple APIs. To help think through this she creates a new data set called API Design . She also thinks that she's going to do some high level project planning and requirements capture so she creates two more data sets: Software Project Planning and Capability Definitions . Now as Lynn starts to work on her design she hops from data set to data set creating and editing elements related to the overall data set topic. Each Element is an instance of an element definition she created earlier. If she decides to add a note about one of her elements she can leverage the out of the box Note Element Definition that is defined in the system space. How the system treats Lynn's data is shown below.","title":"Data Spaces"},{"location":"data_model/data_spaces/#data-spaces","text":"The data model is partition into multiple spaces based on intended use. They are: System Space, User Space, Data Sets","title":"Data Spaces"},{"location":"data_model/data_spaces/#system-space","text":"The system space is designated for Element Definitions that are provided out of the box by the application. They can be used by the user but not redefined.","title":"System Space"},{"location":"data_model/data_spaces/#user-space","text":"The user space is composed of all Data Sets and Element Definitions defined by a user.","title":"User Space"},{"location":"data_model/data_spaces/#data-sets","text":"A data set is a collection of Element Definitions and Elements specified by a user. They are analogous to a workspace. Elements created in a data set are not available in another. They provide top level partitioning of elements for the user.","title":"Data Sets"},{"location":"data_model/data_spaces/#the-data-set-life-cycle","text":"While the System Space and User Space cannot be directly manipulated by the user, data sets can. They have a full life cycle in which users can create and manage multiple data sets. The image below provides insight into the possible data set life cycle. New data sets are provisioned by either creating a new empty one or importing an existing one. A user could import a data set they received from another person or as a restore from an earlier export. Once a data set exists, a user can select it. After it is selected the user can choose to edit it, view it, export a copy of it or even delete it.","title":"The Data Set Life Cycle"},{"location":"data_model/data_spaces/#data-spaces-example","text":"It is easier to understand the design intention of the data spaces with an example. Lynn is a user that designs IT systems. Imagine that Lynn is using Insights to help think through the work that will be required to build an IT system. She starts by identifying the different data types she needs for defining her system. She creates Element Definitions for each of the data types. These definitions are stored in her user space. They can be used to create new Elements in all the data sets she creates. Lynn knows her system is going to need multiple APIs. To help think through this she creates a new data set called API Design . She also thinks that she's going to do some high level project planning and requirements capture so she creates two more data sets: Software Project Planning and Capability Definitions . Now as Lynn starts to work on her design she hops from data set to data set creating and editing elements related to the overall data set topic. Each Element is an instance of an element definition she created earlier. If she decides to add a note about one of her elements she can leverage the out of the box Note Element Definition that is defined in the system space. How the system treats Lynn's data is shown below.","title":"Data Spaces Example"},{"location":"data_model/dictionary/","text":"The Data Model The application data model can be seen in the below ERD diagram. A full Explanation of all entities is provided in the Node Definitions section. Node Definitions SystemSpace The collection of ElementDefinitions that are available to the user to instantiate, but can not be redefined. There is currently only one instance of a SystemSpace node in a local graph. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes name A label for the system space. String System Space Unique creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361 User A person who interacts with the application. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes first_name The user's given name. String John last_name The user's family name. String Smith user_name The user's prompted identifier. Used for authentication. String jsmith Unique email_address The user's recovery email address. String jsmith@smith.com creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361 ElementDefinition An abstract object that is responsible for the definition of nodes that can be dynamically provisioned by the user. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes name The name of the Element Definition. String Note Unique Yes description Explanation of what the Element Definition is for. String Captures user thoughts. creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361 PropertyDefinition Defines a data field that can be associated with an ElementDefinition. Note: Need to flush out the valid types. (Engine Issue #48) Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes name The name of the field shall have. String Note type The data type the field shall have. String Any creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361 DataSet A graph, defined by a user composed of ElementDefinitions and Elements and their associations. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes name The name of the Data Set. String Product Enhancements Unique Yes description Explanation of what the Data Set is for. String My Product Thoughts creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361 Element A node in the graph. It is created from the template of an ElementDefinition. The Element is created with two associated Labels: The ElementDefinition name. The reserved word: element. Fields are node properties based on the ElementDefinition's associated PropertyDefinition. Each associated PropertyDefinition results in a unique field added to the Element. The field's name and type match what is specified on the PropertyDefinition. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes fields See above note. Any n/a creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361 Tag Definition A user defined tag. A tag is metadata that can be assigned to an Element for the purpose of classification. Elements may have 0 to many tags. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes name The name of the tag. String person, place, thing Unique Yes creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361 Database Constraints Index Creation All database constraints and indexes are created upon initializing a new database. This is performed by org.machine.engine.graph.internal.SchemaCreator. See the code documentation for more details.","title":"Data Dictionary"},{"location":"data_model/dictionary/#the-data-model","text":"The application data model can be seen in the below ERD diagram. A full Explanation of all entities is provided in the Node Definitions section.","title":"The Data Model"},{"location":"data_model/dictionary/#node-definitions","text":"","title":"Node Definitions"},{"location":"data_model/dictionary/#systemspace","text":"The collection of ElementDefinitions that are available to the user to instantiate, but can not be redefined. There is currently only one instance of a SystemSpace node in a local graph. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes name A label for the system space. String System Space Unique creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361","title":"SystemSpace"},{"location":"data_model/dictionary/#user","text":"A person who interacts with the application. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes first_name The user's given name. String John last_name The user's family name. String Smith user_name The user's prompted identifier. Used for authentication. String jsmith Unique email_address The user's recovery email address. String jsmith@smith.com creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361","title":"User"},{"location":"data_model/dictionary/#elementdefinition","text":"An abstract object that is responsible for the definition of nodes that can be dynamically provisioned by the user. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes name The name of the Element Definition. String Note Unique Yes description Explanation of what the Element Definition is for. String Captures user thoughts. creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361","title":"ElementDefinition"},{"location":"data_model/dictionary/#propertydefinition","text":"Defines a data field that can be associated with an ElementDefinition. Note: Need to flush out the valid types. (Engine Issue #48) Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes name The name of the field shall have. String Note type The data type the field shall have. String Any creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361","title":"PropertyDefinition"},{"location":"data_model/dictionary/#dataset","text":"A graph, defined by a user composed of ElementDefinitions and Elements and their associations. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes name The name of the Data Set. String Product Enhancements Unique Yes description Explanation of what the Data Set is for. String My Product Thoughts creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361","title":"DataSet"},{"location":"data_model/dictionary/#element","text":"A node in the graph. It is created from the template of an ElementDefinition. The Element is created with two associated Labels: The ElementDefinition name. The reserved word: element. Fields are node properties based on the ElementDefinition's associated PropertyDefinition. Each associated PropertyDefinition results in a unique field added to the Element. The field's name and type match what is specified on the PropertyDefinition. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes fields See above note. Any n/a creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361","title":"Element"},{"location":"data_model/dictionary/#tag-definition","text":"A user defined tag. A tag is metadata that can be assigned to an Element for the purpose of classification. Elements may have 0 to many tags. Field Name Description Type Example Constraints Indexed Deprecated mid The unique ID of the graph node. IV UUID 329c4c3f-4213-4c82-90fb-05bac8943596 Unique Yes name The name of the tag. String person, place, thing Unique Yes creation_time When the node is created. Timestamp 1535023012361 last_modified_time When the node was last modified. Timestamp 1535023012361","title":"Tag Definition"},{"location":"data_model/dictionary/#database-constraints-index-creation","text":"All database constraints and indexes are created upon initializing a new database. This is performed by org.machine.engine.graph.internal.SchemaCreator. See the code documentation for more details.","title":"Database Constraints &amp; Index Creation"},{"location":"data_model/edges_overview/","text":"Edges Elements are the vertices of the graph while edges associate the relationships identified by the user between the elements. Data on Edges Not all data is stored in the Elements. The edges themselves can store data depending on the context. This is done to simplify the number of required nodes in the graph. The data dictionary provides a full account of all edges and their associated properties.","title":"Edges"},{"location":"data_model/edges_overview/#edges","text":"Elements are the vertices of the graph while edges associate the relationships identified by the user between the elements.","title":"Edges"},{"location":"data_model/edges_overview/#data-on-edges","text":"Not all data is stored in the Elements. The edges themselves can store data depending on the context. This is done to simplify the number of required nodes in the graph. The data dictionary provides a full account of all edges and their associated properties.","title":"Data on Edges"},{"location":"data_model/elements_overview/","text":"The Humble Element The application data model is simplistic by design. Rather than having hundreds of predefined tables to capture the user's data a meta model is employed to empower users to define how they want their data stored. This is accomplished through the use of 3 node types: Element Definitions, Property Definitions and Elements. The Element Definition Node An Element Definition is the heart of the Insights data model. It is what makes the dynamic data model possible. Users create new element definitions to define what their data looks like. When they later capture data they do so by provisioning instances of their element definitions in the form of elements . For software developers, the analogy of classes and objects is appropriate. In object orientated software classes are defined and then instances of the classes are created called objects. The same is true with Element Definitions. Element Definitions are simple. They are composed of a name, a description and a collection of property definitions . The Property Definition Node Property Definitions define what data fields are available on an element. Each Property Definition has a name and type. Property Definition Types The type value specified for a property definition has two effects. First, it specifies what the storage format is for the field on any instantiated elements and second, it drives what input control is displayed in the user interface on the Element form. There are two categories of property definition types: primitives and ADTs. Primitive Types Primitive types are the data types supported by Neo4J. Integer Float String Boolean Spatial Point Date Time LocalTime DateTime LocalDateTime Duration Abstract Data Types (ADT) Abstract data types are combinations of primitives to enable common complex fields. Address Phone Number Email Address Markdown The Element Node Elements are where the action is. They contain the actual user data. They are the vertices in the graph connected by edges. Even though the graph leverages a meta model, Elements are strongly typed. When a user provisions a new Element of a specific Element Definition type the application provisions a Neo4J node with a label that matches the Element Definition name. The fields on the new node are created according to the associated property definitions. Currently the Element Definition enforcement is only done at Element provisioning time. If a user changes an Element Definition after some Elements where provisioned, nothing happens to the existing Elements. Element Organization Element Tagging A goal of the system is to allow the users to work with their data the way they want to. As part of that, users should be allowed to categorize and group Elements as they see fit. This is accomplished through the use of tags. Tag Rules Tags are defined by the user in the context of a data set. They must be unique in the scope of their containing data set. Tags may only contain alphanumeric characters (including spaces). Prefixed and trailing white space are removed. Spaces between words are replaced with underscores. Tag Implementation When a tag is defined a Tag Definition node is created and associated with the active Data Set node. When a tag is applied to an Element, it is added as a Neo4J label . Multiple tags may be applied to an element. Tags may also be removed. If a Tag Definition is deleted, the associated tag is also removed from all Elements. The Elements, however, are not deleted. The Element Life Cycle","title":"The Humble Element"},{"location":"data_model/elements_overview/#the-humble-element","text":"The application data model is simplistic by design. Rather than having hundreds of predefined tables to capture the user's data a meta model is employed to empower users to define how they want their data stored. This is accomplished through the use of 3 node types: Element Definitions, Property Definitions and Elements.","title":"The Humble Element"},{"location":"data_model/elements_overview/#the-element-definition-node","text":"An Element Definition is the heart of the Insights data model. It is what makes the dynamic data model possible. Users create new element definitions to define what their data looks like. When they later capture data they do so by provisioning instances of their element definitions in the form of elements . For software developers, the analogy of classes and objects is appropriate. In object orientated software classes are defined and then instances of the classes are created called objects. The same is true with Element Definitions. Element Definitions are simple. They are composed of a name, a description and a collection of property definitions .","title":"The Element Definition Node"},{"location":"data_model/elements_overview/#the-property-definition-node","text":"Property Definitions define what data fields are available on an element. Each Property Definition has a name and type.","title":"The Property Definition Node"},{"location":"data_model/elements_overview/#property-definition-types","text":"The type value specified for a property definition has two effects. First, it specifies what the storage format is for the field on any instantiated elements and second, it drives what input control is displayed in the user interface on the Element form. There are two categories of property definition types: primitives and ADTs.","title":"Property Definition Types"},{"location":"data_model/elements_overview/#primitive-types","text":"Primitive types are the data types supported by Neo4J. Integer Float String Boolean Spatial Point Date Time LocalTime DateTime LocalDateTime Duration","title":"Primitive Types"},{"location":"data_model/elements_overview/#abstract-data-types-adt","text":"Abstract data types are combinations of primitives to enable common complex fields. Address Phone Number Email Address Markdown","title":"Abstract Data Types (ADT)"},{"location":"data_model/elements_overview/#the-element-node","text":"Elements are where the action is. They contain the actual user data. They are the vertices in the graph connected by edges. Even though the graph leverages a meta model, Elements are strongly typed. When a user provisions a new Element of a specific Element Definition type the application provisions a Neo4J node with a label that matches the Element Definition name. The fields on the new node are created according to the associated property definitions. Currently the Element Definition enforcement is only done at Element provisioning time. If a user changes an Element Definition after some Elements where provisioned, nothing happens to the existing Elements.","title":"The Element Node"},{"location":"data_model/elements_overview/#element-organization","text":"","title":"Element Organization"},{"location":"data_model/elements_overview/#element-tagging","text":"A goal of the system is to allow the users to work with their data the way they want to. As part of that, users should be allowed to categorize and group Elements as they see fit. This is accomplished through the use of tags.","title":"Element Tagging"},{"location":"data_model/elements_overview/#tag-rules","text":"Tags are defined by the user in the context of a data set. They must be unique in the scope of their containing data set. Tags may only contain alphanumeric characters (including spaces). Prefixed and trailing white space are removed. Spaces between words are replaced with underscores.","title":"Tag Rules"},{"location":"data_model/elements_overview/#tag-implementation","text":"When a tag is defined a Tag Definition node is created and associated with the active Data Set node. When a tag is applied to an Element, it is added as a Neo4J label . Multiple tags may be applied to an element. Tags may also be removed. If a Tag Definition is deleted, the associated tag is also removed from all Elements. The Elements, however, are not deleted.","title":"Tag Implementation"},{"location":"data_model/elements_overview/#the-element-life-cycle","text":"","title":"The Element Life Cycle"},{"location":"data_model/overview/","text":"The Data Model Overview Introduction Insights leverages a graph database for storing user data. To accomplish this, a metadata model is leveraged that enables the user to define how data is stored. This section attempts to provide insight into the metadata model. Neo4J Dependency Currently, the embedded database is Neo4J . This database is a graph database rather than a relational database. A graph database was selected primarily for two reasons. The application is designed to enable data collection about the relationship between entities. The definition of data entities (i.e. tables) is delayed until runtime since the user is the one specifying the data definitions. While this could be accomplished by layering a meta-model on top of a relational or NoSQL database, a property graph seemed to be a more natural fit. Data Layers The data model is conceptually partitioned into two layers based on responsibility. The application manages the lower layer through direct manipulation of a property graph. The user manages the upper layer which is composed of tagging and meta data definitions. Property Graph The primary responsibility of the application is to enable users to store their data in a safe, secure and reliable way. This is done via the Neo4J property graph . The graph is composed of vertices and edges. A vertex contains data. In the context of the application, a graph vertex is referred to as a node . Edges related the vertices to one another. Nodes and edges are the lowest level building blocks of the data model. They are not used directly by the user, rather higher order domain objects are used . Meta Model A key feature of the system is that it is not opinionated in what data may be stored. This is enabled through the utilization of a meta model . The meta model allows users to define what graph elements they want to work with. The point is to not make an enforceable schema on top of Neo4J's schema but rather to allow the user to define re-usable definitions for Nodes that can be dynamically provisioned and then populated by the user. Tags Working with graphs directly can be laborious. To assist with this, the data model provides the ability to define tags to graph vertices. Tags can be used to search for items or drive the user interface.","title":"Overview"},{"location":"data_model/overview/#the-data-model-overview","text":"","title":"The Data Model Overview"},{"location":"data_model/overview/#introduction","text":"Insights leverages a graph database for storing user data. To accomplish this, a metadata model is leveraged that enables the user to define how data is stored. This section attempts to provide insight into the metadata model.","title":"Introduction"},{"location":"data_model/overview/#neo4j-dependency","text":"Currently, the embedded database is Neo4J . This database is a graph database rather than a relational database. A graph database was selected primarily for two reasons. The application is designed to enable data collection about the relationship between entities. The definition of data entities (i.e. tables) is delayed until runtime since the user is the one specifying the data definitions. While this could be accomplished by layering a meta-model on top of a relational or NoSQL database, a property graph seemed to be a more natural fit.","title":"Neo4J Dependency"},{"location":"data_model/overview/#data-layers","text":"The data model is conceptually partitioned into two layers based on responsibility. The application manages the lower layer through direct manipulation of a property graph. The user manages the upper layer which is composed of tagging and meta data definitions.","title":"Data Layers"},{"location":"data_model/overview/#property-graph","text":"The primary responsibility of the application is to enable users to store their data in a safe, secure and reliable way. This is done via the Neo4J property graph . The graph is composed of vertices and edges. A vertex contains data. In the context of the application, a graph vertex is referred to as a node . Edges related the vertices to one another. Nodes and edges are the lowest level building blocks of the data model. They are not used directly by the user, rather higher order domain objects are used .","title":"Property Graph"},{"location":"data_model/overview/#meta-model","text":"A key feature of the system is that it is not opinionated in what data may be stored. This is enabled through the utilization of a meta model . The meta model allows users to define what graph elements they want to work with. The point is to not make an enforceable schema on top of Neo4J's schema but rather to allow the user to define re-usable definitions for Nodes that can be dynamically provisioned and then populated by the user.","title":"Meta Model"},{"location":"data_model/overview/#tags","text":"Working with graphs directly can be laborious. To assist with this, the data model provides the ability to define tags to graph vertices. Tags can be used to search for items or drive the user interface.","title":"Tags"},{"location":"data_model/queries/","text":"Queries The application has many database queries embedded in the Engine. To ease onboarding and to aid designing enhancements the full list of queries the application uses is provided. Helper Queries Helper queries are not used by the application but can aid development. List all constraints in the database. CALL db.constraints Delete all nodes. (Only do on a database you don't care about.) match (n) detach delete n; Create a couple of simple associated Nodes. create (a:Person {name: 'Steve', mid:123}) - [:association {associationId: 1}] - (b:Person {name: 'Bob', mid:456}) - [:association {associationId: 2}] - (c:Person {name: 'Alice', mid:789}); match (b:Person {mid:456}) create (d:DataSet)-[:contains]- (b); match (x)-[a:association]- (y {mid: 456}) delete a; match (x)-[a]- (y {mid: 456}) where type(a) contains delete a; Working with Elements Removing associations between Elements. Removing an association is as simple as deleting the edge. However, care must be taken to not remove the element from the data set. An edge with the label contains is what registers the element with the data set. To remove all inbound associations the following query can be used. match (x)-[a]- (y {mid: {elementId}}) where type(a) contains delete a; Application Queries TBD Notes Document how to get the Cypher Shell working. Document profile=ing queries using the Cypher profile command. As each query is documented, profile it. Example","title":"Useful Queries"},{"location":"data_model/queries/#queries","text":"The application has many database queries embedded in the Engine. To ease onboarding and to aid designing enhancements the full list of queries the application uses is provided.","title":"Queries"},{"location":"data_model/queries/#helper-queries","text":"Helper queries are not used by the application but can aid development.","title":"Helper Queries"},{"location":"data_model/queries/#list-all-constraints-in-the-database","text":"CALL db.constraints","title":"List all constraints in the database."},{"location":"data_model/queries/#delete-all-nodes-only-do-on-a-database-you-dont-care-about","text":"match (n) detach delete n;","title":"Delete all nodes. (Only do on a database you don't care about.)"},{"location":"data_model/queries/#create-a-couple-of-simple-associated-nodes","text":"create (a:Person {name: 'Steve', mid:123}) - [:association {associationId: 1}] - (b:Person {name: 'Bob', mid:456}) - [:association {associationId: 2}] - (c:Person {name: 'Alice', mid:789}); match (b:Person {mid:456}) create (d:DataSet)-[:contains]- (b); match (x)-[a:association]- (y {mid: 456}) delete a; match (x)-[a]- (y {mid: 456}) where type(a) contains delete a;","title":"Create a couple of simple associated Nodes."},{"location":"data_model/queries/#working-with-elements","text":"","title":"Working with Elements"},{"location":"data_model/queries/#removing-associations-between-elements","text":"Removing an association is as simple as deleting the edge. However, care must be taken to not remove the element from the data set. An edge with the label contains is what registers the element with the data set. To remove all inbound associations the following query can be used. match (x)-[a]- (y {mid: {elementId}}) where type(a) contains delete a;","title":"Removing associations between Elements."},{"location":"data_model/queries/#application-queries","text":"TBD","title":"Application Queries"},{"location":"data_model/queries/#notes","text":"Document how to get the Cypher Shell working. Document profile=ing queries using the Cypher profile command. As each query is documented, profile it. Example","title":"Notes"},{"location":"design/application_overview/","text":"FAQ What is this application? The Insights application is a desktop application that serves as a personal knowledge database. What's special about it? Insights leverages a graph database to store user data. Rather than have an explicit data model for the user to contend with, Insights leverages a meta model that allows the user to define how to store data. Additionally, the user can create ad-hoc associations between any two pieces of data. This enables rich data capture, analysis and discovery. What systems are supported? Currently just OS X. What technology is it built with? ES6 Javascript Electron Neo4J Many NPM modules Can I use it? Nope. Insights is currently in development. Feel free to download the source and play with it, but don't expect much. Is Neo4J embedded? No. The concept is that the user is either running an instance of Neo4J locally or remotely. How are the Neo4J credentials stored? They are provied by the user through the Insights user interface. The application then stores them in the operating system's key store. The application interacts with the key store via the open source framework keytar produced by the Atom development team .","title":"FAQ"},{"location":"design/application_overview/#faq","text":"","title":"FAQ"},{"location":"design/application_overview/#what-is-this-application","text":"The Insights application is a desktop application that serves as a personal knowledge database.","title":"What is this application?"},{"location":"design/application_overview/#whats-special-about-it","text":"Insights leverages a graph database to store user data. Rather than have an explicit data model for the user to contend with, Insights leverages a meta model that allows the user to define how to store data. Additionally, the user can create ad-hoc associations between any two pieces of data. This enables rich data capture, analysis and discovery.","title":"What's special about it?"},{"location":"design/application_overview/#what-systems-are-supported","text":"Currently just OS X.","title":"What systems are supported?"},{"location":"design/application_overview/#what-technology-is-it-built-with","text":"ES6 Javascript Electron Neo4J Many NPM modules","title":"What technology is it built with?"},{"location":"design/application_overview/#can-i-use-it","text":"Nope. Insights is currently in development. Feel free to download the source and play with it, but don't expect much.","title":"Can I use it?"},{"location":"design/application_overview/#is-neo4j-embedded","text":"No. The concept is that the user is either running an instance of Neo4J locally or remotely.","title":"Is Neo4J embedded?"},{"location":"design/application_overview/#how-are-the-neo4j-credentials-stored","text":"They are provied by the user through the Insights user interface. The application then stores them in the operating system's key store. The application interacts with the key store via the open source framework keytar produced by the Atom development team .","title":"How are the Neo4J credentials stored?"},{"location":"design/goals/","text":"Design Goals Projects tend to take on a life of their own. To help avoid technical rabbit holes or inconsistency of implementation some guiding principles are collected here. The Goals A small core system that is expandable. A restrained minimum viable product. Prefer functional solutions over object orientated. This isn't to say the project doesn't uses classes, but rather a pragmatic approach to functional composition is preferred. Leverage off the shelf solutions where possible (e.g. CSS frameworks).","title":"Design Goals"},{"location":"design/goals/#design-goals","text":"Projects tend to take on a life of their own. To help avoid technical rabbit holes or inconsistency of implementation some guiding principles are collected here.","title":"Design Goals"},{"location":"design/goals/#the-goals","text":"A small core system that is expandable. A restrained minimum viable product. Prefer functional solutions over object orientated. This isn't to say the project doesn't uses classes, but rather a pragmatic approach to functional composition is preferred. Leverage off the shelf solutions where possible (e.g. CSS frameworks).","title":"The Goals"},{"location":"design/high_level_architecture/","text":"Application Architecture The Insights application architecture is a combination of Electron, React, Redux and CSS Modules. Application Bootstrap The main application is built as a Webpack bundle. This is then loaded via Electron in the below sequence. Core Technologies and Patterns React React provides the view layer of the application architecture. The user interface is composed of components. A component is a Javascript class that extends React.Component . A component is configured via properties that are passed in at runtime. When a component renders, a custom HTML like DSL called JSX is parsed to produce markup. This markup is used to update the React Virtual DOM , which ultimately updates the browser DOM . Redux Redux is a state container for React applications. It is leveraged to centralize state and provide consistency across the application as to how user events are handled. The Redux portion of the architecture is composed of: The Store: Centralizes the application state across all components. Reducer Functions: Responsible for processing state changes. Actions: Describes the intent to change state. CSS Modules CSS Modules are a convention for bundling the required CSS with React components. This is enabled by Webpack with the css-loader and style-loader plugins.","title":"Application Architecture"},{"location":"design/high_level_architecture/#application-architecture","text":"The Insights application architecture is a combination of Electron, React, Redux and CSS Modules.","title":"Application Architecture"},{"location":"design/high_level_architecture/#application-bootstrap","text":"The main application is built as a Webpack bundle. This is then loaded via Electron in the below sequence.","title":"Application Bootstrap"},{"location":"design/high_level_architecture/#core-technologies-and-patterns","text":"","title":"Core Technologies and Patterns"},{"location":"design/high_level_architecture/#react","text":"React provides the view layer of the application architecture. The user interface is composed of components. A component is a Javascript class that extends React.Component . A component is configured via properties that are passed in at runtime. When a component renders, a custom HTML like DSL called JSX is parsed to produce markup. This markup is used to update the React Virtual DOM , which ultimately updates the browser DOM .","title":"React"},{"location":"design/high_level_architecture/#redux","text":"Redux is a state container for React applications. It is leveraged to centralize state and provide consistency across the application as to how user events are handled. The Redux portion of the architecture is composed of: The Store: Centralizes the application state across all components. Reducer Functions: Responsible for processing state changes. Actions: Describes the intent to change state.","title":"Redux"},{"location":"design/high_level_architecture/#css-modules","text":"CSS Modules are a convention for bundling the required CSS with React components. This is enabled by Webpack with the css-loader and style-loader plugins.","title":"CSS Modules"},{"location":"design/mvp/","text":"Roadmap The application is currently in its initial development phase. The goal is to establish a usable application by version 0.1.0. The target capability roadmap is below. Target Releases 0.0.1 - Wiring [X] Establish the Design Document [ ] Publish Design Doc on GitHub Pages [ ] Travis.ci Setup Wiring [X] Mocha Unit Tests [X] Storybook.js for Component Design [X] Neo4J Integration via Bolt Driver [X] Electron/React/Redux/Router5/CSS Modules [X] Webpack Build [ ] Storybook.js Tests Neo4J Integration [X] Schema Builder [ ] Credentials Storage with Keyczar [ ] Neo4J Utilities [X] Design Initial Data Model [ ] Application Logging 0.0.2 - Schema DSL [ ] Docker Build for Database Query Testing [ ] System Space [ ] User Profile [ ] Data Set CRUD [ ] Element Definition CRUD [ ] Element CRUD [ ] Element Association CRUD [ ] Element Definition Grouping [ ] Abstract Data Types for Property Definitions 0.0.3 - Application Bootstrap [ ] User Neo4J Login [ ] User Neo4J Logout [ ] User Profile Management 0.0.4 - Core UI [ ] ProseMirror Integration [ ] CSS Framework/React Component Library Integration [ ] Data Set Life Cycle [ ] Element Definition Life Cycle [ ] Element Life Cycle [ ] Element Associations [ ] Copy/Clone an existing Element 0.0.5 - Graph Manipulation [ ] Abstract Graph Traversal [ ] Element Search [ ] Auto-suggest as you type for searching [ ] Element Tagging 0.0.6 - Plugin Engine [ ] Package-able System Element Definition [ ] System Element Definition: Notes [ ] System Capability Plugins [ ] Text Edit Plugin Support [ ] Graph Traversal Functions 0.0.7 - Importing Exporting [ ] Plugin: JSON Data Set Export [ ] Plugin: JSON Data Set Import [ ] Plugin: CSV Elements Export 0.0.8 - Text Editing [ ] Text Edit Plugin: Markdown Support [ ] Text Edit Plugin: URL Link Support [ ] Text Edit Plugin: Spell Checker [ ] Text Edit Plugin: Wikipedia Integration [ ] Text Edit Plugin: YouTube Integration 0.0.9 - ?? [ ] Text Edit Plugin: Todo Lists [ ] Visualizations? 0.1.0 - Usability [ ] Application Dock Icon [ ] UI Themes? [ ] Install Wizard [ ] In-place Updates [ ] User Manual","title":"Roadmap"},{"location":"design/mvp/#roadmap","text":"The application is currently in its initial development phase. The goal is to establish a usable application by version 0.1.0. The target capability roadmap is below.","title":"Roadmap"},{"location":"design/mvp/#target-releases","text":"","title":"Target Releases"},{"location":"design/mvp/#001-wiring","text":"[X] Establish the Design Document [ ] Publish Design Doc on GitHub Pages [ ] Travis.ci Setup Wiring [X] Mocha Unit Tests [X] Storybook.js for Component Design [X] Neo4J Integration via Bolt Driver [X] Electron/React/Redux/Router5/CSS Modules [X] Webpack Build [ ] Storybook.js Tests Neo4J Integration [X] Schema Builder [ ] Credentials Storage with Keyczar [ ] Neo4J Utilities [X] Design Initial Data Model [ ] Application Logging","title":"0.0.1 - Wiring"},{"location":"design/mvp/#002-schema-dsl","text":"[ ] Docker Build for Database Query Testing [ ] System Space [ ] User Profile [ ] Data Set CRUD [ ] Element Definition CRUD [ ] Element CRUD [ ] Element Association CRUD [ ] Element Definition Grouping [ ] Abstract Data Types for Property Definitions","title":"0.0.2 - Schema DSL"},{"location":"design/mvp/#003-application-bootstrap","text":"[ ] User Neo4J Login [ ] User Neo4J Logout [ ] User Profile Management","title":"0.0.3 - Application Bootstrap"},{"location":"design/mvp/#004-core-ui","text":"[ ] ProseMirror Integration [ ] CSS Framework/React Component Library Integration [ ] Data Set Life Cycle [ ] Element Definition Life Cycle [ ] Element Life Cycle [ ] Element Associations [ ] Copy/Clone an existing Element","title":"0.0.4 - Core UI"},{"location":"design/mvp/#005-graph-manipulation","text":"[ ] Abstract Graph Traversal [ ] Element Search [ ] Auto-suggest as you type for searching [ ] Element Tagging","title":"0.0.5 - Graph Manipulation"},{"location":"design/mvp/#006-plugin-engine","text":"[ ] Package-able System Element Definition [ ] System Element Definition: Notes [ ] System Capability Plugins [ ] Text Edit Plugin Support [ ] Graph Traversal Functions","title":"0.0.6 - Plugin Engine"},{"location":"design/mvp/#007-importing-exporting","text":"[ ] Plugin: JSON Data Set Export [ ] Plugin: JSON Data Set Import [ ] Plugin: CSV Elements Export","title":"0.0.7 - Importing &amp; Exporting"},{"location":"design/mvp/#008-text-editing","text":"[ ] Text Edit Plugin: Markdown Support [ ] Text Edit Plugin: URL Link Support [ ] Text Edit Plugin: Spell Checker [ ] Text Edit Plugin: Wikipedia Integration [ ] Text Edit Plugin: YouTube Integration","title":"0.0.8 - Text Editing"},{"location":"design/mvp/#009-","text":"[ ] Text Edit Plugin: Todo Lists [ ] Visualizations?","title":"0.0.9 - ??"},{"location":"design/mvp/#010-usability","text":"[ ] Application Dock Icon [ ] UI Themes? [ ] Install Wizard [ ] In-place Updates [ ] User Manual","title":"0.1.0 - Usability"},{"location":"design/system_context/","text":"The System Context Insights is simple in concept. It is a desktop application that enables the user to capture data that is important to them in the way they want to capture it. As seen in the diagram below, there is a single persona of user that directly interacts with Insights via the user interface. The application in turn communicates with the user specified Neo4J graph database via the Javascript Bolt driver. Additionally, the application can fetch remote content such as web pages or streaming video from 3rd party systems such as Wikipedia.com or YouTube.com.","title":"System Context"},{"location":"design/system_context/#the-system-context","text":"Insights is simple in concept. It is a desktop application that enables the user to capture data that is important to them in the way they want to capture it. As seen in the diagram below, there is a single persona of user that directly interacts with Insights via the user interface. The application in turn communicates with the user specified Neo4J graph database via the Javascript Bolt driver. Additionally, the application can fetch remote content such as web pages or streaming video from 3rd party systems such as Wikipedia.com or YouTube.com.","title":"The System Context"},{"location":"design/technology_stack/","text":"Technology Stack The application is composed of multiple technologies. The project is young and as such not all technologies have been selected. For the ones that are identified, they have been laid out in the layered diagram below. Technology Components User Interface Components TBD User Interface Pages TBD Core Modules The core modules are application classes, functions and packages that provide supporting capabilities to the user interface or working with the database. Engine DSL A custom domain specific language (DSL) is created for working with the meta model on top of Neo4J. Neo4J Wrapper A utility class for encapsulating Neo4J specific capabilities. Schema Creator A utility class for creating the meta model database schema. Secret Store A utility class for working with the operating system's keystore. NPM Modules The NPM Modules are runtime dependencies leveraged by the Core Modules or UI components. ProseMirror ProseMirror is a 3rd party text editor framework. It is used by the Element editor. React React-DOM React and React-DOM are NPM modules of the popular React web component framework developed by Facebook. Redux Redux is a state container for Javascript applications. It is leveraged as an event based architecture for the user interface, as opposed to using other application architectures such as Flux or MVC . Router5 Router5 is a Javascript routing engine. It is leverage for navigating between application pages. Functional Framework A design goal for the implementation of Insights is to prefer functional composition over object orientated solutions. To assist with this a functional framework or utility library will be used. Several are currently being evaluated for this purpose. Component Library A design goal for the implementation of Insights is to leverage off the shelf capabilities where possible. With this in mind a React component library will be selected that leverages a CSS framework. This is to avoid building common components (e.g. toolbars, tables, spinners) from scratch. Runtime Native Libraries The application is not native. As such, it needs a supporting runtime to host the application. Electron Electron is a framework for building cross platform desktop applications with web technologies. Insights is built as an Electron app. JVM Insights does not depend on the Java Virtual Machine (JVM). However, Neo4J does. If the user is connecting Insights to a local instance of Neo4J, then the JVM is required. See the Neo4J dependencies for more details. Development Frameworks Utilities The following frameworks and tools are leveraged for developing on Insights. Webpack Webpack is a bundler for Javascript applications. It is used to take all the application resources and package them together as an app. Babel Babel is a Javascript transpiler. It is used for converting ES6 and React components into ES5. Mocha Mocha is a unit testing framework. Chai Chai is an assertion framework that is used with mocha for creating more readable tests. Sinon Sinon is a spy and mocking framework that is used in writing unit tests. JSDom JSDom is a headless browser DOM that is used for testing React components. JSDoc JSDoc is a source code markup library used for documenting Javascript. Storybook.js Storybook.js is an application and framework that is used for the development, documentation and testing of user interface components. Data Storage The application is a personal knowledge database. To accomplish this, the following data storage solutions are used. Neo4J Neo4J is a graph database. This project does not ship directly with Neo4J. Rather the application connects to an existing Neo4J database provided by the user. Application Logs Insights records internal system actions to application logs. TBD Application Configuration TBD Supporting Services The following 3rd party services are leveraged for the application. Travis.ci Travis.ci provides continuous integration. GitHub.com GitHub.com hosts the code and related assets. GitHub Pages GitHub Pages are leveraged for hosting this design document.","title":"Technology Stack"},{"location":"design/technology_stack/#technology-stack","text":"The application is composed of multiple technologies. The project is young and as such not all technologies have been selected. For the ones that are identified, they have been laid out in the layered diagram below.","title":"Technology Stack"},{"location":"design/technology_stack/#technology-components","text":"","title":"Technology Components"},{"location":"design/technology_stack/#user-interface-components","text":"TBD","title":"User Interface Components"},{"location":"design/technology_stack/#user-interface-pages","text":"TBD","title":"User Interface Pages"},{"location":"design/technology_stack/#core-modules","text":"The core modules are application classes, functions and packages that provide supporting capabilities to the user interface or working with the database.","title":"Core Modules"},{"location":"design/technology_stack/#engine-dsl","text":"A custom domain specific language (DSL) is created for working with the meta model on top of Neo4J.","title":"Engine DSL"},{"location":"design/technology_stack/#neo4j-wrapper","text":"A utility class for encapsulating Neo4J specific capabilities.","title":"Neo4J Wrapper"},{"location":"design/technology_stack/#schema-creator","text":"A utility class for creating the meta model database schema.","title":"Schema Creator"},{"location":"design/technology_stack/#secret-store","text":"A utility class for working with the operating system's keystore.","title":"Secret Store"},{"location":"design/technology_stack/#npm-modules","text":"The NPM Modules are runtime dependencies leveraged by the Core Modules or UI components.","title":"NPM Modules"},{"location":"design/technology_stack/#prosemirror","text":"ProseMirror is a 3rd party text editor framework. It is used by the Element editor.","title":"ProseMirror"},{"location":"design/technology_stack/#react-react-dom","text":"React and React-DOM are NPM modules of the popular React web component framework developed by Facebook.","title":"React &amp; React-DOM"},{"location":"design/technology_stack/#redux","text":"Redux is a state container for Javascript applications. It is leveraged as an event based architecture for the user interface, as opposed to using other application architectures such as Flux or MVC .","title":"Redux"},{"location":"design/technology_stack/#router5","text":"Router5 is a Javascript routing engine. It is leverage for navigating between application pages.","title":"Router5"},{"location":"design/technology_stack/#functional-framework","text":"A design goal for the implementation of Insights is to prefer functional composition over object orientated solutions. To assist with this a functional framework or utility library will be used. Several are currently being evaluated for this purpose.","title":"Functional Framework"},{"location":"design/technology_stack/#component-library","text":"A design goal for the implementation of Insights is to leverage off the shelf capabilities where possible. With this in mind a React component library will be selected that leverages a CSS framework. This is to avoid building common components (e.g. toolbars, tables, spinners) from scratch.","title":"Component Library"},{"location":"design/technology_stack/#runtime-native-libraries","text":"The application is not native. As such, it needs a supporting runtime to host the application.","title":"Runtime &amp; Native Libraries"},{"location":"design/technology_stack/#electron","text":"Electron is a framework for building cross platform desktop applications with web technologies. Insights is built as an Electron app.","title":"Electron"},{"location":"design/technology_stack/#jvm","text":"Insights does not depend on the Java Virtual Machine (JVM). However, Neo4J does. If the user is connecting Insights to a local instance of Neo4J, then the JVM is required. See the Neo4J dependencies for more details.","title":"JVM"},{"location":"design/technology_stack/#development-frameworks-utilities","text":"The following frameworks and tools are leveraged for developing on Insights.","title":"Development Frameworks &amp; Utilities"},{"location":"design/technology_stack/#webpack","text":"Webpack is a bundler for Javascript applications. It is used to take all the application resources and package them together as an app.","title":"Webpack"},{"location":"design/technology_stack/#babel","text":"Babel is a Javascript transpiler. It is used for converting ES6 and React components into ES5.","title":"Babel"},{"location":"design/technology_stack/#mocha","text":"Mocha is a unit testing framework.","title":"Mocha"},{"location":"design/technology_stack/#chai","text":"Chai is an assertion framework that is used with mocha for creating more readable tests.","title":"Chai"},{"location":"design/technology_stack/#sinon","text":"Sinon is a spy and mocking framework that is used in writing unit tests.","title":"Sinon"},{"location":"design/technology_stack/#jsdom","text":"JSDom is a headless browser DOM that is used for testing React components.","title":"JSDom"},{"location":"design/technology_stack/#jsdoc","text":"JSDoc is a source code markup library used for documenting Javascript.","title":"JSDoc"},{"location":"design/technology_stack/#storybookjs","text":"Storybook.js is an application and framework that is used for the development, documentation and testing of user interface components.","title":"Storybook.js"},{"location":"design/technology_stack/#data-storage","text":"The application is a personal knowledge database. To accomplish this, the following data storage solutions are used.","title":"Data Storage"},{"location":"design/technology_stack/#neo4j","text":"Neo4J is a graph database. This project does not ship directly with Neo4J. Rather the application connects to an existing Neo4J database provided by the user.","title":"Neo4J"},{"location":"design/technology_stack/#application-logs","text":"Insights records internal system actions to application logs. TBD","title":"Application Logs"},{"location":"design/technology_stack/#application-configuration","text":"TBD","title":"Application Configuration"},{"location":"design/technology_stack/#supporting-services","text":"The following 3rd party services are leveraged for the application.","title":"Supporting Services"},{"location":"design/technology_stack/#travisci","text":"Travis.ci provides continuous integration.","title":"Travis.ci"},{"location":"design/technology_stack/#githubcom","text":"GitHub.com hosts the code and related assets.","title":"GitHub.com"},{"location":"design/technology_stack/#github-pages","text":"GitHub Pages are leveraged for hosting this design document.","title":"GitHub Pages"},{"location":"dsl/implementation/","text":"Implementation TBD","title":"Implementation"},{"location":"dsl/implementation/#implementation","text":"TBD","title":"Implementation"},{"location":"dsl/overview/","text":"Overview TBD","title":"Overview"},{"location":"dsl/overview/#overview","text":"TBD","title":"Overview"},{"location":"dsl/use/","text":"Use TBD","title":"Use"},{"location":"dsl/use/#use","text":"TBD","title":"Use"},{"location":"security/keystore/","text":"Key Store TBD","title":"Key Store"},{"location":"security/keystore/#key-store","text":"TBD","title":"Key Store"},{"location":"security/neo4j_credentials/","text":"Neo4J Credentials Insights connects to a Neo4J database using the Javascript Bolt driver . In order to connect the user must provide the below list of fields. Field Name Description Type Example scheme The protocol to communicate with. String bolt host The DNS name of the location to connect to. String localhost port The port to connect to on the host machine. Integer 80 uri Anything to the right of the PORT number. String /api username The Neo4J username. String n/a password The Neo4J password. String n/a Example: Format: scheme://host:port:uri Example (URI is empty): bolt://localhost:7687 Credentials Storage The Neo4J credentials are stored in the operating system's key store.","title":"Neo4J Credentials"},{"location":"security/neo4j_credentials/#neo4j-credentials","text":"Insights connects to a Neo4J database using the Javascript Bolt driver . In order to connect the user must provide the below list of fields. Field Name Description Type Example scheme The protocol to communicate with. String bolt host The DNS name of the location to connect to. String localhost port The port to connect to on the host machine. Integer 80 uri Anything to the right of the PORT number. String /api username The Neo4J username. String n/a password The Neo4J password. String n/a Example: Format: scheme://host:port:uri Example (URI is empty): bolt://localhost:7687","title":"Neo4J Credentials"},{"location":"security/neo4j_credentials/#credentials-storage","text":"The Neo4J credentials are stored in the operating system's key store.","title":"Credentials Storage"}]}